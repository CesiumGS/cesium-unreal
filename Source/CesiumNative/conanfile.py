# EDIT THIS FILE! THIS IS SCAFFOLDING FOR YOU TO OWN!
# THIS FILE WAS ORIGINALLY GENERATED BY CONAN-UE4CLI VERSION 0.0.38.
from conans import ConanFile
import os
import subprocess
import sys
from types import SimpleNamespace

class CesiumNativeConan(ConanFile):
    settings = "os", "compiler", "build_type", "arch"
    generators = "json"

    cesiumNativeVersion = ""
    cesiumNativeRequirements = [
        "cesium3dtilesselection",
        "cesiumasync",
        "cesiumgeometry",
        "cesiumgeospatial",
        "cesiumgltf",
        "cesiumgltfreader",
        "cesiumionclient",
        "cesiumjsonreader",
        "cesiumutility",
    ]

    def _overrideUnreal(self, dependency):
        '''
        Adds a package as a dependency, filling in the Unreal Engine version string.

        Call this with a package reference that uses a placeholder for the channel, e.g.:
        self._requireUnreal("my-package/1.0.0@adamrehn/{}")
        '''
        self.requires(dependency.format(os.environ["UNREAL_ENGINE_VERSION"]), override=True)

    def _requireNative(self, dependency):
        self.requires("%s/%s" % (dependency, self.cesiumNativeVersion))

    def requirements(self):
        self.cesiumNativeVersion = os.environ.get("CESIUM_NATIVE_VERSION")

        # If there's an explicit version specified, or if we're baking, we want to use
        # individual cesium-native libraries. Otherwise, we depend on _all_ cesium-native
        # libraries so that we can build the entire thing in a development workflow without
        # missing any dependencies.
        useIndividualLibraries = False
        if (self.cesiumNativeVersion or os.environ.get("BAKE_CESIUM_NATIVE")):
          useIndividualLibraries = True

        # If a CESIUM_NATIVE_VERSION is specified, just use it. Otherwise, get it
        # from the cesium-native submodule.
        if not self.cesiumNativeVersion:
          sys.path.append("../../extern/cesium-native/tools")
          from automate import cesiumNativeYml

          # Grab the version from the cesium-native.yml file.
          nativeYml = cesiumNativeYml()
          self.cesiumNativeVersion = "%s@%s/%s" % (nativeYml["version"], nativeYml["user"], nativeYml["channel"])

        if useIndividualLibraries:
          for requirement in self.cesiumNativeRequirements:
            self._requireNative(requirement)
        else:
          self._requireNative("cesium-native")

        # Use Unreal's version of third-party libraries where available
        self._overrideUnreal("openssl/ue4@adamrehn/{}")
