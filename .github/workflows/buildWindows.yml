name: Build Windows

on:
  workflow_call:
    inputs:
      runner-label:
        required: true
        type: string
      visual-studio-version:
        required: false
        type: string
        default: ''
      visual-studio-components:
        required: false
        type: string
        default: ''
      unreal-engine-version:
        required: true
        type: string
      unreal-engine-zip:
        required: true
        type: string
      # unreal-linux-toolchain:
      #   required: false
      #   type: string
      #   default: ""
      unreal-program-name:
        required: true
        type: string
      upload-package-base-name:
        required: true
        type: string
      extra-choco-packages:
        required: false
        type: string
        default: ''
      cmake-generator:
        required: true
        type: string
      cmake-toolchain:
        required: false
        type: string
        default: ""
      cmake-platform:
        required: false
        type: string
        default: "x64"
jobs:
  build:
    runs-on: ${{ inputs.runner-label }}
    steps:
      - name: Check disk space
        run: |
          get-psdrive
      - name: Install Visual Studio components
        if: ${{ inputs.visual-studio-version && inputs.visual-studio-components }}
        run: |
          $components = "${{ inputs.visual-studio-components }}" -split "," | foreach {"--add $_"}
          if ($components.Length -gt 0)
          {
            $componentcmd = $components -join " "
            Start-Process "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" -ArgumentList "modify --installPath ""C:\Program Files\Microsoft Visual Studio\${{ inputs.visual-studio-version }}\Enterprise"" --quiet $componentcmd" -Wait -PassThru
          }
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Extra Dependencies
        if: ${{ inputs.extra-choco-packages }}
        run: |
          choco install -y ${{ inputs.extra-choco-packages }}
      - name: Set environment variables
        run: |
          $env:CESIUM_UNREAL_VERSION=$env:GITHUB_REF_NAME
          $env:BUILD_CESIUM_UNREAL_PACKAGE_NAME="${{ inputs.upload-package-base-name }}-${env:CESIUM_UNREAL_VERSION}"
          $env:BUILD_CESIUM_UNREAL_PACKAGE_PATH="$env:GITHUB_WORKSPACE/packages/CesiumForUnreal"
          $env:UNREAL_BATCH_FILES_PATH="D:/Program Files/Epic Games/${{ inputs.unreal-program-name }}/Engine/Build/BatchFiles"
          $env:AWS_REGION="us-east-1"

          # Make these available to subsequent steps
          echo "BUILD_CESIUM_UNREAL_PACKAGE_NAME=${env:BUILD_CESIUM_UNREAL_PACKAGE_NAME}" >> $env:GITHUB_ENV
          echo "BUILD_CESIUM_UNREAL_PACKAGE_PATH=${env:BUILD_CESIUM_UNREAL_PACKAGE_PATH}" >> $env:GITHUB_ENV
          echo "UNREAL_BATCH_FILES_PATH=${env:UNREAL_BATCH_FILES_PATH}" >> $env:GITHUB_ENV
          echo "AWS_REGION=${env:AWS_REGION}" >> $env:GITHUB_ENV

          # Confirm vars to the console
          echo BUILD_CESIUM_UNREAL_PACKAGE_NAME=$env:BUILD_CESIUM_UNREAL_PACKAGE_NAME
          echo BUILD_CESIUM_UNREAL_PACKAGE_PATH=$env:BUILD_CESIUM_UNREAL_PACKAGE_PATH
          echo UNREAL_BATCH_FILES_PATH=$env:UNREAL_BATCH_FILES_PATH
      - name: Install Unreal Engine
        uses: ./.github/actions/install-unreal-windows
        with:
          unreal-engine-zip: ${{ inputs.unreal-engine-zip }}
          unreal-program-name: ${{ inputs.unreal-program-name }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Install nasm
        uses: ilammy/setup-nasm@v1.5.1
      - name: Build cesium-native
        run: |
          cd extern
          $toolchainOption=If ("${{ inputs.cmake-toolchain }}") {"-T ${{ inputs.cmake-toolchain }}"} Else {""}
          cmake -B build -S . -A "${{ inputs.cmake-platform }}" -G "${{ inputs.cmake-generator }}" $toolchainOption
          cmake --build build --config Release --target install -j8
          cd ..
          rm -r -fo extern
      - name: Overwrite plugin engine version
        run: |
          ((Get-Content -path CesiumForUnreal.uplugin -Raw) -replace '"EngineVersion": "5.1.0"','"EngineVersion": "${{ inputs.unreal-engine-version }}"') | Set-Content -Path CesiumForUnreal.uplugin
      - name: Customize BuildConfiguration.xml
        run: |
          mkdir -p "$env:USERPROFILE\AppData\Roaming\Unreal Engine\UnrealBuildTool"
          # - We limit parallel actions because our builds use a lot more memory than UBT thinks they will.
          # - We set the source code control Provider to None so UBT includes all files in the unity build.
          Set-Content -Path "$env:USERPROFILE\AppData\Roaming\Unreal Engine\UnrealBuildTool\BuildConfiguration.xml" -Value '<?xml version="1.0" encoding="utf-8" ?>
            <Configuration xmlns="https://www.unrealengine.com/BuildConfiguration">
              <BuildConfiguration>
                <MaxParallelActions>2</MaxParallelActions>
              </BuildConfiguration>
              <SourceFileWorkingSet><Provider>None</Provider></SourceFileWorkingSet>
            </Configuration>'
      - name: Build CesiumForUnreal plugin
        timeout-minutes: 180
        run: |
          cd "$env:UNREAL_BATCH_FILES_PATH"
          ./RunUAT.bat BuildPlugin -Plugin="$env:GITHUB_WORKSPACE/CesiumForUnreal.uplugin" -Package="$env:BUILD_CESIUM_UNREAL_PACKAGE_PATH" -CreateSubFolder -TargetPlatforms=Win64
          echo LastExitCode=$LASTEXITCODE
          if ($LASTEXITCODE -eq 0) {
            exit 0
          }
          else {
            exit -1
          }
      - name: Print log
        if: ${{ failure() }}
        run: |
          cat "C:\Users\runneradmin\AppData\Roaming\Unreal Engine\AutomationTool\Logs\C+Program+Files+Epic+Games+UE_5.3\UBT-UnrealEditor-Win64-Development.txt"
      - name: Upload plugin artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_CESIUM_UNREAL_PACKAGE_NAME}}
          path: packages
