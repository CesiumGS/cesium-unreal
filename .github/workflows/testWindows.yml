name: Test Windows

on:
  workflow_call:
    inputs:
      unreal-runner-label:
        required: true
        type: string
      unreal-binaries-path:
        required: true
        type: string
      unreal-plugins-path:
        required: true
        type: string
      test-package-base-name:
        required: true
        type: string
jobs:
  test:
    runs-on: ["self-hosted","windows","x64","${{ inputs.unreal-runner-label }}"]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # so that `git describe` works.
          sparse-checkout: |
            .github
            TestsProject      
      - name: Set environment variables
        run: |
          $env:CESIUM_UNREAL_VERSION=$(git describe)
          $env:PLUGIN_PACKAGE_NAME="${{ inputs.test-package-base-name }}-${env:CESIUM_UNREAL_VERSION}"
          $env:TESTS_PROJECT_ROOT="$env:GITHUB_WORKSPACE/TestsProject"
          $env:TESTS_PROJECT_LOGS="$env:TESTS_PROJECT_ROOT/Saved/Logs"

          # Make these available to subsequent steps
          echo "PLUGIN_PACKAGE_NAME=${env:PLUGIN_PACKAGE_NAME}" >> $env:GITHUB_ENV
          echo "TESTS_PROJECT_ROOT=${env:TESTS_PROJECT_ROOT}" >> $env:GITHUB_ENV
          echo "TESTS_PROJECT_LOGS=${env:TESTS_PROJECT_LOGS}" >> $env:GITHUB_ENV

          # Confirm vars to the console
          echo ""
          echo unreal-binaries-path="${{ inputs.unreal-binaries-path }}"
          echo unreal-plugins-path="${{ inputs.unreal-plugins-path }}"
          echo PLUGIN_PACKAGE_NAME=$env:PLUGIN_PACKAGE_NAME          
          echo TESTS_PROJECT_ROOT=$env:TESTS_PROJECT_ROOT
          echo TESTS_PROJECT_LOGS=$env:TESTS_PROJECT_LOGS
      - name: Download plugin artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PLUGIN_PACKAGE_NAME}}
          path: download          
      - name: Install plugin to Unreal Engine
        run: |
          dir download/CesiumForUnreal
          md "${{ inputs.unreal-plugins-path }}/Marketplace"
          cp "download/CesiumForUnreal" "${{ inputs.unreal-plugins-path }}/Marketplace" -r      
      - name: Show plugin engine version
        run: |
          cd download/CesiumForUnreal
          dir
          Get-Content "CesiumForUnreal.uplugin" | select-string -pattern "EngineVersion"
      - name: Run Cesium tests
        timeout-minutes: 60      
        run: |
          cd "${{ inputs.unreal-binaries-path }}"
          ./UnrealEditor-Cmd.exe "$env:TESTS_PROJECT_ROOT/TestsProject.uproject" -execcmds="Automation RunTests Cesium.;quit" -nullrhi -unattended -nosplash -ReportExportPath="$env:TESTS_PROJECT_LOGS"
      - name: Display tests log 
        if: always()
        run: |
          cd "$env:TESTS_PROJECT_LOGS"  
          dir 
          Get-Content TestsProject.log          
      - name: Display tests report
        if: always()
        run: |
          cd "$env:TESTS_PROJECT_LOGS"
          Get-Content index.json
      - name: Evaluate tests results
        if: always()
        run: |
          cd "$env:TESTS_PROJECT_LOGS"

          $failedTests = ""
          $succeededTests = ""

          function Parse-Test($jsonObject) {
            $currTestName = ""
            foreach ($property in $jsonObject.PSObject.Properties) {
                $name = $property.Name
                $value = $property.Value

                if($name -eq "fullTestPath") {
                  $currTestName = $value
                }
                
                if($name -eq "state") {
                   if ($value -eq "Success") {
                     $global:succeededTests += $currTestName + "`n"
                   }
                   else {
                     $global:failedTests += $currTestName + "`n"
                   }
                }
            }
          }

          function Parse-Json($jsonObject) {
            foreach ($property in $jsonObject.PSObject.Properties) {
                $name = $property.Name
                $value = $property.Value

                # If the property value is another object, call function recursively
                if ($name -eq "tests" -and $value -is [System.Object[]]) {
                    for (($i = 0); $i -lt $value.Count; $i++) {
                      Parse-Test($value[$i])
                    }
                }
            }
          }

          $json = Get-Content -Path 'index.json' | ConvertFrom-Json # Read in json
          Parse-Json -jsonObject $json # Parse json
          
          echo " "
          if ($failedTests.Length -eq 0) {
            echo "All tests passed:"
            echo "-----------------"
            echo "$succeededTests"

            exit 0
          }
          else {
            echo "Passing tests:"
            echo "--------------"
            echo "$succeededTests"

            echo "FAILED tests:"
            echo "-------------"
            echo "$failedTests"

            exit -1
          }
